{
    "swagger": "2.0",
    "info": {
        "description": "Main goal of this project is to provide web-service that allows teachers to create programming courses with built-in interactive excercises.\nProject page: https://github.com/kee-reel/LATEST",
        "title": "LATE API",
        "contact": {
            "name": "Kee Reel",
            "url": "https://kee-reel.com/about-ru",
            "email": "c4rb0n_unit@protonmail.com"
        },
        "version": "0.1"
    },
    "host": "localhost:12345",
    "basePath": "/",
    "paths": {
        "/languages": {
            "get": {
                "description": "Returns list of supported languages.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "languages"
                ],
                "summary": "Get supported languages",
                "operationId": "get-languages",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/api.APILangsResponse"
                        }
                    },
                    "500": {
                        "description": "Server internal bug",
                        "schema": {
                            "$ref": "#/definitions/api.APIInternalError"
                        }
                    }
                }
            }
        },
        "/leaderboard": {
            "get": {
                "description": "Returns scores for all users",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "leaderboard"
                ],
                "summary": "Get information about users scores",
                "operationId": "get-leaderboard",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Token, returned by GET /login",
                        "name": "token",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/models.Leaderboard"
                        }
                    },
                    "400": {
                        "description": "Possible error codes: 300, 301, 302, 304",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "500": {
                        "description": "Server internal bug",
                        "schema": {
                            "$ref": "#/definitions/api.APIInternalError"
                        }
                    }
                }
            }
        },
        "/login": {
            "get": {
                "description": "Returns token that could be used in other requests.\nIf user logs in from new IP, verification link will be sent on email.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "login"
                ],
                "summary": "Get token for registered user",
                "operationId": "get-login",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User email address",
                        "name": "email",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "User password. Must be at least 6 symbols",
                        "name": "pass",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/api.APIToken"
                        }
                    },
                    "400": {
                        "description": "Possible error codes: 100, 101, 102, 200, 201, 202, 303",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "500": {
                        "description": "Server internal bug",
                        "schema": {
                            "$ref": "#/definitions/api.APIInternalError"
                        }
                    }
                }
            }
        },
        "/logout": {
            "get": {
                "description": "If user wants to logout on current IP - send this request.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "logout"
                ],
                "summary": "Delete existing token on server",
                "operationId": "get-logout",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Token, returned by GET /login",
                        "name": "token",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/api.APINoError"
                        }
                    },
                    "400": {
                        "description": "Possible error codes: 300, 301, 302, 304",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "500": {
                        "description": "Server internal bug",
                        "schema": {
                            "$ref": "#/definitions/api.APIInternalError"
                        }
                    }
                }
            }
        },
        "/profile": {
            "get": {
                "description": "Returns user's score, email and name by token",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "profile"
                ],
                "summary": "Get information about user by token",
                "operationId": "get-profile",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Token, returned by GET /login",
                        "name": "token",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "400": {
                        "description": "Possible error codes: 300, 301, 302, 304",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "500": {
                        "description": "Server internal bug",
                        "schema": {
                            "$ref": "#/definitions/api.APIInternalError"
                        }
                    }
                }
            }
        },
        "/register": {
            "get": {
                "description": "Usually user makes this request when opening link sent on email.",
                "produces": [
                    "text/html"
                ],
                "tags": [
                    "register"
                ],
                "summary": "Confirm new user registration",
                "operationId": "get-register",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Registration token, sent by POST /register",
                        "name": "token",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request result described on HTML page",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server internal bug",
                        "schema": {
                            "$ref": "#/definitions/api.APIInternalError"
                        }
                    }
                }
            },
            "post": {
                "description": "On success user will receive confirmation link on specified email.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "register"
                ],
                "summary": "Register new user",
                "operationId": "post-register",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User email",
                        "name": "email",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "User password",
                        "name": "pass",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "User name",
                        "name": "name",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/api.APINoError"
                        }
                    },
                    "400": {
                        "description": "Possible error codes: 100, 101, 103, 200, 201, 700, 701",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "500": {
                        "description": "Server internal bug",
                        "schema": {
                            "$ref": "#/definitions/api.APIInternalError"
                        }
                    }
                }
            }
        },
        "/reset": {
            "get": {
                "description": "Marks user's account for deletion. In 7 days after suspension accound will be deleted. Deletion clears user's profile, task solutions and score in leaderboard.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "suspend"
                ],
                "summary": "Suspends user's account",
                "operationId": "get-suspend",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Token, returned by POST /suspend",
                        "name": "token",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request result described on HTML page",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server internal bug",
                        "schema": {
                            "$ref": "#/definitions/api.APIInternalError"
                        }
                    }
                }
            },
            "post": {
                "description": "Sends email with GET /suspend request that marks user's account for deletion.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "suspend"
                ],
                "summary": "Suspends user's account",
                "operationId": "post-suspend",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Token, returned by GET /login",
                        "name": "token",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/api.APINoError"
                        }
                    },
                    "400": {
                        "description": "Possible error codes: 300, 301, 302, 304",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "500": {
                        "description": "Server internal bug",
                        "schema": {
                            "$ref": "#/definitions/api.APIInternalError"
                        }
                    }
                }
            }
        },
        "/restore": {
            "get": {
                "description": "Usually user makes this request when opening link sent on email.",
                "produces": [
                    "text/html"
                ],
                "tags": [
                    "restore"
                ],
                "summary": "Confirm user password restore",
                "operationId": "get-restore",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Verification token, sent by POST /verify",
                        "name": "token",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request result described on HTML page",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "On success user will receive confirmation link on specified email.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "restore"
                ],
                "summary": "Restore user password",
                "operationId": "post-restore",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User email",
                        "name": "email",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "New user password",
                        "name": "pass",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/api.APINoError"
                        }
                    },
                    "400": {
                        "description": "Possible error codes: 100, 101, 102, 200, 201",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "500": {
                        "description": "Server internal bug",
                        "schema": {
                            "$ref": "#/definitions/api.APIInternalError"
                        }
                    }
                }
            }
        },
        "/solution": {
            "get": {
                "description": "Returns last solution text for specified task. If no solution was posted, nothing will be returned.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "solution"
                ],
                "summary": "Get last solution of specific task",
                "operationId": "get-solution",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Access token returned by GET /login",
                        "name": "token",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "ID of task",
                        "name": "task_id",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/api.APISolution"
                        }
                    },
                    "400": {
                        "description": "Possible error codes: 300, 301, 302, 304",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "500": {
                        "description": "Server internal bug",
                        "schema": {
                            "$ref": "#/definitions/api.APIInternalError"
                        }
                    }
                }
            },
            "post": {
                "description": "Receives solution in form of file or plain text.\nBuilds solution and then runs. While running it gives various input parameters (through stdin) and expects specific result (from stdout).\nApart from errors raised due to invalid POST parameters, there are 2 \"normal\" errors:\n504 - Solution build error. If this happens, then result will contain: `{\"error\":508,\"error_data\":{\"msg\":\"multiline compilation error\", \"tests_passed\":0, \"tests_total\":15}}`\n505 - Solution test error. If this happens, then result will contain: `{\"error\":509,\"error_data\":{\"expected\":\"expected result\", \"params\":\"semicolon separated input parameters\", \"result\":\"actual result\", \"tests_passed\":7, \"tests_total\":15}}`\n506 - Solution timeout error (took more than 0.5 secs). If this happens, then result will contain: `{\"error\":509,\"error_data\":{\"params\":\"semicolon separated input parameters\", \"result\":\"actual result\", \"tests_passed\":0, \"tests_total\":15}}`\n507 - Solution runtime error. If this happens, then result will contain: `{\"error\":509,\"error_data\":{\"params\":\"semicolon separated input parameters\", \"msg\":\"actual result\", \"tests_passed\":2, \"tests_total\":15}}`\nIf \"verbose\" flag is \"true\" then result will contain (if no error occurs): `{\"result\":[{\"params\":\"semicolon separated input parameters\", \"result\":\"actual result\"}]}`",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "solution"
                ],
                "summary": "Send solution for specific task",
                "operationId": "post-solution",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Access token returned by GET /login",
                        "name": "token",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Language of passing solution",
                        "name": "lang",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "ID of task to pass with given solution",
                        "name": "task_id",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Source text of passing solution",
                        "name": "source_text",
                        "in": "formData"
                    },
                    {
                        "type": "file",
                        "description": "File with source text of passing solution",
                        "name": "source_file",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "User test cases for solution",
                        "name": "test_cases",
                        "in": "formData"
                    },
                    {
                        "type": "boolean",
                        "description": "If specified - when solution is passed, all test results will be returned",
                        "name": "verbose",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/api.APITestSuccessResult"
                        }
                    },
                    "400": {
                        "description": "Possible error codes: 300, 301, 302, 304, 4XX, 5XX, 6XX",
                        "schema": {
                            "$ref": "#/definitions/api.APITestFailResult"
                        }
                    },
                    "500": {
                        "description": "Server internal bug",
                        "schema": {
                            "$ref": "#/definitions/api.APIInternalError"
                        }
                    }
                }
            }
        },
        "/tasks/flat": {
            "get": {
                "description": "Returns complete data about existing tasks.\nResult will be formatted in flat structure with integer ID as a key. Example could be found in responses section.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Get tasks data in flat structure",
                "operationId": "get-tasks-flat",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Access token returned by GET /login",
                        "name": "token",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Comma separated task IDs, for example: `ids=1,17,104`. If provided - returns data only for specified tasks (including related projects and units). If any of the tasks could not be found - error 402 will be thrown.",
                        "name": "ids",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tasks data. additionalProp here stands for integer IDs",
                        "schema": {
                            "$ref": "#/definitions/api.APITasksFlat"
                        }
                    },
                    "400": {
                        "description": "Possible error codes: 300, 301, 302, 304, 401, 402",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "500": {
                        "description": "Server internal bug",
                        "schema": {
                            "$ref": "#/definitions/api.APIInternalError"
                        }
                    }
                }
            }
        },
        "/tasks/hierarchy": {
            "get": {
                "description": "Returns complete data about existing tasks.\nResult will be formatted in hierarchical structure with folder_name as a key. Example could be found in responses section.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Get tasks data in hierarchical structure",
                "operationId": "get-tasks-hierarchy",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Access token returned by GET /login",
                        "name": "token",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Comma separated folder names, for example: `folders=sample-project,unit-1,task-1`. If provided - returns data for specified project/unit/task. Folder names must be specified in strict sequence: project-\u003eunit-\u003etask.",
                        "name": "folders",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tasks data. additionalProp here stands for folder_name of project/unit/task",
                        "schema": {
                            "$ref": "#/definitions/api.APITasksHierarchy"
                        }
                    },
                    "400": {
                        "description": "Possible error codes: 300, 301, 302, 304, 8XX",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "500": {
                        "description": "Server internal bug",
                        "schema": {
                            "$ref": "#/definitions/api.APIInternalError"
                        }
                    }
                }
            }
        },
        "/template": {
            "get": {
                "description": "Returns solution template for supported language.\nAlso it's possible to provide task_id:\n- if there is no specific template for this task - common one will be returned\n- if there is one - specific template will be returned",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "template"
                ],
                "summary": "Returns solution template",
                "operationId": "get-template",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Access token returned by GET /login",
                        "name": "token",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Language of template",
                        "name": "lang",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "ID of task",
                        "name": "task_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/api.APITemplate"
                        }
                    },
                    "400": {
                        "description": "Possible error codes: 300, 301, 302, 304, 600, 601",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "500": {
                        "description": "Server internal bug",
                        "schema": {
                            "$ref": "#/definitions/api.APIInternalError"
                        }
                    }
                }
            }
        },
        "/verify": {
            "get": {
                "description": "Usually user makes this request when opening link sent on email.",
                "produces": [
                    "text/html"
                ],
                "tags": [
                    "verify"
                ],
                "summary": "Verifies user connection from new IP",
                "operationId": "get-verify",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Access token returned by GET /login",
                        "name": "token",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request result described on HTML page",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "api.APIError": {
            "description": "Error code from https://github.com/kee-reel/LATE/blob/main/web/errors.go",
            "type": "object",
            "properties": {
                "error": {
                    "type": "integer",
                    "example": 300
                }
            }
        },
        "api.APIInternalError": {
            "description": "Error code from https://github.com/kee-reel/LATE/blob/main/web/errors.go",
            "type": "object",
            "properties": {
                "error": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "api.APILangsResponse": {
            "type": "object",
            "properties": {
                "langs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "c",
                        "py",
                        "pas"
                    ]
                }
            }
        },
        "api.APINoError": {
            "description": "Empty - success response",
            "type": "object"
        },
        "api.APIProjectHierarchy": {
            "type": "object",
            "properties": {
                "folder_name": {
                    "type": "string",
                    "example": "sample_project"
                },
                "id": {
                    "type": "integer",
                    "example": 666
                },
                "name": {
                    "type": "string",
                    "example": "Sample project"
                },
                "units": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/api.APIUnitHierarchy"
                    }
                }
            }
        },
        "api.APISolution": {
            "type": "object",
            "properties": {
                "text": {
                    "type": "string",
                    "example": "a = int(input())\nb = int(input())\nprint(a+b)"
                }
            }
        },
        "api.APITasksFlat": {
            "type": "object",
            "properties": {
                "projects": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/models.Project"
                    }
                },
                "tasks": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/models.Task"
                    }
                },
                "units": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/models.Unit"
                    }
                }
            }
        },
        "api.APITasksHierarchy": {
            "type": "object",
            "additionalProperties": {
                "$ref": "#/definitions/api.APIProjectHierarchy"
            }
        },
        "api.APITemplate": {
            "type": "object",
            "properties": {
                "template": {
                    "type": "string",
                    "example": "#include \u003cstdio.h\u003e\nint main() {\n\t\n}"
                }
            }
        },
        "api.APITestFailResult": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "integer",
                    "example": 508
                },
                "error_data": {
                    "$ref": "#/definitions/models.SolutionErrorData"
                }
            }
        },
        "api.APITestSuccessResult": {
            "type": "object",
            "properties": {
                "result": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.SolutionVerboseResult"
                    }
                },
                "score_diff": {
                    "type": "number",
                    "example": 2.5
                }
            }
        },
        "api.APIToken": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "score": {
                    "type": "number"
                },
                "token": {
                    "type": "string",
                    "example": "9rzNUDp8bP6VOnGIqOO011f5EB4jk0eN0osZt0KFZHTtWIpiwqzVj2vof5sOq80QIJbne5dHiH5vEUe7uJ42X5X39tHGpt0LTreFOjMkfdn4sB6gzouUHc4tGubhikoKuK05P06W1x0QK0zJzbPaZYG4mfBpfU1u8xbqSPVo8ZI9zumiJUiHC8MbJxMPYsGJjZMChQBtA0NvKuAReS3v1704QBX5zZCAyyNP47VZ51E9MMqVGoZBxFmJ4mCHRBy7"
                }
            }
        },
        "api.APIUnitHierarchy": {
            "type": "object",
            "properties": {
                "folder_name": {
                    "type": "string",
                    "example": "unit-1"
                },
                "id": {
                    "type": "integer",
                    "example": 666
                },
                "name": {
                    "type": "string",
                    "example": "Sample unit"
                },
                "tasks": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/models.Task"
                    }
                }
            }
        },
        "models.Leaderboard": {
            "type": "object",
            "additionalProperties": {
                "type": "number"
            }
        },
        "models.Project": {
            "type": "object",
            "properties": {
                "folder_name": {
                    "type": "string",
                    "example": "sample_project"
                },
                "id": {
                    "type": "integer",
                    "example": 666
                },
                "name": {
                    "type": "string",
                    "example": "Sample project"
                }
            }
        },
        "models.SolutionBuildError": {
            "type": "object",
            "properties": {
                "msg": {
                    "type": "string",
                    "example": "Build fail message"
                }
            }
        },
        "models.SolutionErrorData": {
            "type": "object",
            "properties": {
                "build": {
                    "$ref": "#/definitions/models.SolutionBuildError"
                },
                "runtime": {
                    "$ref": "#/definitions/models.SolutionRuntimeError"
                },
                "test": {
                    "$ref": "#/definitions/models.SolutionTestError"
                },
                "tests_passed": {
                    "type": "integer",
                    "example": 7
                },
                "tests_total": {
                    "type": "integer",
                    "example": 10
                },
                "timeout": {
                    "$ref": "#/definitions/models.SolutionTimeoutError"
                }
            }
        },
        "models.SolutionRuntimeError": {
            "type": "object",
            "properties": {
                "msg": {
                    "type": "string",
                    "example": "Build fail message"
                },
                "params": {
                    "type": "string",
                    "example": "2;1;7'"
                }
            }
        },
        "models.SolutionTestError": {
            "type": "object",
            "properties": {
                "expected": {
                    "type": "string",
                    "example": "8"
                },
                "params": {
                    "type": "string",
                    "example": "2;1;7'"
                },
                "result": {
                    "type": "string",
                    "example": "1"
                }
            }
        },
        "models.SolutionTimeoutError": {
            "type": "object",
            "properties": {
                "params": {
                    "type": "string",
                    "example": "2;1;7'"
                },
                "time": {
                    "type": "number",
                    "example": 1.5
                }
            }
        },
        "models.SolutionVerboseResult": {
            "type": "object",
            "properties": {
                "params": {
                    "type": "string",
                    "example": "2;1;7;'"
                },
                "result": {
                    "type": "string",
                    "example": "8"
                }
            }
        },
        "models.Task": {
            "type": "object",
            "properties": {
                "completion": {
                    "type": "number",
                    "example": 0.58
                },
                "desc": {
                    "type": "string",
                    "example": "Sample description"
                },
                "folder_name": {
                    "type": "string",
                    "example": "task-1"
                },
                "id": {
                    "type": "integer",
                    "example": 111
                },
                "input": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.TaskParamData"
                    }
                },
                "name": {
                    "type": "string",
                    "example": "Sample task"
                },
                "number": {
                    "type": "integer",
                    "example": 0
                },
                "output": {
                    "type": "string",
                    "example": "Program must output sum of two integers on a newline"
                },
                "project_id": {
                    "type": "integer",
                    "example": 666
                },
                "score": {
                    "type": "integer"
                },
                "unit_id": {
                    "type": "integer",
                    "example": 333
                }
            }
        },
        "models.TaskParamData": {
            "type": "object",
            "properties": {
                "dimensions": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "example": [
                        5,
                        4
                    ]
                },
                "name": {
                    "type": "string",
                    "example": "task-1"
                },
                "range": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "-1000",
                        "1000"
                    ]
                },
                "type": {
                    "type": "string",
                    "example": "int"
                }
            }
        },
        "models.Unit": {
            "type": "object",
            "properties": {
                "folder_name": {
                    "type": "string",
                    "example": "unit-1"
                },
                "id": {
                    "type": "integer",
                    "example": 666
                },
                "name": {
                    "type": "string",
                    "example": "Sample unit"
                }
            }
        },
        "models.User": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "score": {
                    "type": "number"
                }
            }
        }
    }
}