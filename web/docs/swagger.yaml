basePath: /
definitions:
  main.APIError:
    description: Error code from https://github.com/kee-reel/LATE/blob/main/web/errors.go
    properties:
      error:
        example: 300
        type: integer
    type: object
  main.APIInternalError:
    description: Error code from https://github.com/kee-reel/LATE/blob/main/web/errors.go
    properties:
      error:
        example: 1
        type: integer
    type: object
  main.APILangsResponse:
    properties:
      langs:
        example:
        - c
        - py
        - pas
        items:
          type: string
        type: array
    type: object
  main.APINoError:
    description: Empty success response
    type: object
  main.APIProjectFlat:
    properties:
      folder_name:
        example: sample_project
        type: string
      name:
        example: Sample project
        type: string
    type: object
  main.APIProjectHierarchy:
    properties:
      id:
        example: 666
        type: integer
      name:
        example: Sample project
        type: string
      units:
        items:
          $ref: '#/definitions/main.APIUnitHierarchy'
        type: array
    type: object
  main.APISolutionErrorData:
    properties:
      expected:
        example: "8"
        type: string
      msg:
        example: Build fail message
        type: string
      params:
        example: 2;1;7'
        type: string
      result:
        example: "1"
        type: string
      stage:
        example: test
        type: string
    type: object
  main.APISolutionTest:
    properties:
      error:
        example: 508
        type: integer
      errorData:
        $ref: '#/definitions/main.APISolutionErrorData'
    type: object
  main.APISolutionTestSuccess:
    properties:
      result:
        items:
          $ref: '#/definitions/main.APISolutionVerboseResult'
        type: array
    type: object
  main.APISolutionVerboseResult:
    properties:
      params:
        example: 2;1;7'
        type: string
      result:
        example: "8"
        type: string
    type: object
  main.APITaskFlat:
    properties:
      desc:
        example: Sample description
        type: string
      folderName:
        example: task-1
        type: string
      input:
        items:
          $ref: '#/definitions/main.APITaskInput'
        type: array
      isPassed:
        example: true
        type: boolean
      name:
        example: Sample task
        type: string
      number:
        example: 0
        type: integer
      output:
        example: Description of output format
        type: string
      unitId:
        example: 1
        type: integer
    type: object
  main.APITaskHierarchy:
    properties:
      desc:
        example: Sample description
        type: string
      id:
        example: 666
        type: integer
      input:
        items:
          $ref: '#/definitions/main.APITaskInput'
        type: array
      isPassed:
        example: true
        type: boolean
      name:
        example: Sample task
        type: string
      number:
        example: 0
        type: integer
      output:
        example: Description of output format
        type: string
      unitId:
        example: 1
        type: integer
    type: object
  main.APITaskInput:
    properties:
      dimensions:
        example:
        - 5
        - 4
        items:
          type: integer
        type: array
      name:
        example: task-1
        type: string
      range:
        example:
        - "-1000"
        - "1000"
        items:
          type: string
        type: array
      type:
        example: int
        type: string
    type: object
  main.APITasksDataFlat:
    properties:
      projects:
        additionalProperties:
          $ref: '#/definitions/main.APIProjectFlat'
        type: object
      tasks:
        additionalProperties:
          $ref: '#/definitions/main.APITaskFlat'
        type: object
      units:
        additionalProperties:
          $ref: '#/definitions/main.APIUnitFlat'
        type: object
    type: object
  main.APITasksDataHierarchy:
    additionalProperties:
      $ref: '#/definitions/main.APIProjectHierarchy'
    type: object
  main.APITemplate:
    properties:
      template:
        example: "#include <stdio.h>\nint main() {\n\t\n}"
        type: string
    type: object
  main.APITokenResponse:
    properties:
      token:
        example: 9rzNUDp8bP6VOnGIqOO011f5EB4jk0eN0osZt0KFZHTtWIpiwqzVj2vof5sOq80QIJbne5dHiH5vEUe7uJ42X5X39tHGpt0LTreFOjMkfdn4sB6gzouUHc4tGubhikoKuK05P06W1x0QK0zJzbPaZYG4mfBpfU1u8xbqSPVo8ZI9zumiJUiHC8MbJxMPYsGJjZMChQBtA0NvKuAReS3v1704QBX5zZCAyyNP47VZ51E9MMqVGoZBxFmJ4mCHRBy7
        type: string
    type: object
  main.APIUnitFlat:
    properties:
      folder_name:
        example: unit-1
        type: string
      name:
        example: Sample unit
        type: string
    type: object
  main.APIUnitHierarchy:
    properties:
      folder_name:
        example: unit-1
        type: string
      id:
        example: 666
        type: integer
      tasks:
        items:
          $ref: '#/definitions/main.APITaskHierarchy'
        type: array
    type: object
host: localhost:12345
info:
  contact:
    email: c4rb0n_unit@protonmail.com
    name: Kee Reel
    url: https://kee-reel.com/about-ru
  description: |-
    Web service that allows to run tests for programms written in almost any language.
    Project page: https://github.com/kee-reel/LATE
  title: LATE API
  version: "0.1"
paths:
  /languages:
    get:
      description: Returns list of supported languages.
      operationId: get-languages
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/main.APILangsResponse'
        "500":
          description: Server internal bug
          schema:
            $ref: '#/definitions/main.APIInternalError'
      summary: Get supported languages
      tags:
      - languages
  /login:
    get:
      description: Returns token that could be used in other requests.
      operationId: get-login
      parameters:
      - description: User email address
        in: query
        name: email
        required: true
        type: string
      - description: User password. Must be at least 6 symbols
        in: query
        name: pass
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/main.APITokenResponse'
        "400":
          description: 'Possible error codes: 100, 101, 102, 200, 201, 202, 303'
          schema:
            $ref: '#/definitions/main.APIError'
        "500":
          description: Server internal bug
          schema:
            $ref: '#/definitions/main.APIInternalError'
      summary: Get token for registered user
      tags:
      - login
  /register:
    get:
      description: Usually user makes this request when opening link sent on email.
      operationId: get-register
      parameters:
      - description: Registration token, sent by POST /register
        in: query
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/main.APINoError'
        "400":
          description: 'Possible error codes: 300, 301, 302, 304'
          schema:
            $ref: '#/definitions/main.APIError'
        "500":
          description: Server internal bug
          schema:
            $ref: '#/definitions/main.APIInternalError'
      summary: Confirm new user registration
      tags:
      - register
    post:
      description: On success user will receive confirmation link on specified email.
      operationId: post-register
      parameters:
      - description: User email
        in: formData
        name: email
        required: true
        type: string
      - description: User password
        in: formData
        name: pass
        required: true
        type: string
      - description: User name
        in: formData
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/main.APINoError'
        "400":
          description: 'Possible error codes: 100, 101, 103, 200, 201, 700, 701'
          schema:
            $ref: '#/definitions/main.APIError'
        "500":
          description: Server internal bug
          schema:
            $ref: '#/definitions/main.APIInternalError'
      summary: Register new user
      tags:
      - register
  /restore:
    get:
      description: Usually user makes this request when opening link sent on email.
      operationId: get-restore
      parameters:
      - description: Verification token, sent by POST /verify
        in: query
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/main.APINoError'
        "400":
          description: 'Possible error codes: 300, 301, 302, 304'
          schema:
            $ref: '#/definitions/main.APIError'
        "500":
          description: Server internal bug
          schema:
            $ref: '#/definitions/main.APIInternalError'
      summary: Confirm user password restore
      tags:
      - restore
    post:
      description: On success user will receive confirmation link on specified email.
      operationId: post-restore
      parameters:
      - description: User email
        in: formData
        name: email
        required: true
        type: string
      - description: New user password
        in: formData
        name: pass
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/main.APINoError'
        "400":
          description: 'Possible error codes: 100, 101, 102, 200, 201'
          schema:
            $ref: '#/definitions/main.APIError'
        "500":
          description: Server internal bug
          schema:
            $ref: '#/definitions/main.APIInternalError'
      summary: Restore user password
      tags:
      - restore
  /solution:
    post:
      description: |-
        Receives solution in form of file or plain text.
        Builds solution and then runs. While running it gives various input parameters (through stdin) and expects specific result (from stdout).
        Apart from errors raised due to invalid POST parameters, there are 2 "normal" errors:
        508 - Solution build error. If this happens, then result will contain: `{"error":508,"error_data":{"msg":"multiline compilation error"}}`
        509 - Solution test error. If this happens, then result will contain: `{"error":509,"error_data":{"expected":"expected result", "params":"semicolon separated input parameters", "result":"actual result"}}`
        If "verbose" flag is "true" then result will contain (if no error occurs): `{"result":[{"params":"semicolon separated input parameters", "result":"actual result"}]}`
      operationId: post-solution
      parameters:
      - description: Access token returned by GET /login
        in: query
        name: token
        required: true
        type: string
      - description: Language of passing solution
        in: formData
        name: lang
        required: true
        type: string
      - description: ID of task to pass with given solution
        in: formData
        name: task_id
        required: true
        type: integer
      - description: Source text of passing solution
        in: formData
        name: source_text
        type: string
      - description: File with source text of passing solution
        in: formData
        name: source_file
        type: file
      - description: User test cases for solution
        in: formData
        name: test_cases
        type: string
      - description: If specified - when solution is passed, all test results will
          be returned
        in: formData
        name: verbose
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/main.APISolutionTestSuccess'
        "400":
          description: 'Possible error codes: 300, 301, 302, 304, 4XX, 5XX, 6XX'
          schema:
            $ref: '#/definitions/main.APISolutionTest'
        "500":
          description: Server internal bug
          schema:
            $ref: '#/definitions/main.APIInternalError'
      summary: Send solution for specific task
      tags:
      - solution
  /tasks/flat:
    get:
      description: |-
        Returns complete data about existing tasks.
        Result will be formatted in flat structure with integer ID as a key. Example could be found in responses section.
      operationId: get-tasks-flat
      parameters:
      - description: Access token returned by GET /login
        in: query
        name: token
        required: true
        type: string
      - description: 'Comma separated task IDs: \'
        in: query
        name: ids
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Tasks data. additionalProp here stands for integer IDs
          schema:
            $ref: '#/definitions/main.APITasksDataFlat'
        "400":
          description: 'Possible error codes: 300, 301, 302, 304, 401, 402'
          schema:
            $ref: '#/definitions/main.APIError'
        "500":
          description: Server internal bug
          schema:
            $ref: '#/definitions/main.APIInternalError'
      summary: Get tasks data in flat structure
      tags:
      - tasks
  /tasks/hierarhy:
    get:
      description: |-
        Returns complete data about existing tasks.
        Result will be formatted in hierarchical structure with folder_name as a key. Example could be found in responses section.
      operationId: get-tasks-hierarhy
      parameters:
      - description: Access token returned by GET /login
        in: query
        name: token
        required: true
        type: string
      - description: 'Comma separated folder names: \'
        in: query
        name: folders
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Tasks data. additionalProp here stands for integer IDs
          schema:
            $ref: '#/definitions/main.APITasksDataHierarchy'
        "400":
          description: 'Possible error codes: 300, 301, 302, 304, 8XX'
          schema:
            $ref: '#/definitions/main.APIError'
        "500":
          description: Server internal bug
          schema:
            $ref: '#/definitions/main.APIInternalError'
      summary: Get tasks data in hierarhical structure
      tags:
      - tasks
  /template:
    get:
      description: Template for solution for all supported languages
      operationId: get-template
      parameters:
      - description: Access token returned by GET /login
        in: query
        name: token
        required: true
        type: string
      - description: Language of template
        in: formData
        name: lang
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/main.APITemplate'
        "400":
          description: 'Possible error codes: 300, 301, 302, 304, 600, 601'
          schema:
            $ref: '#/definitions/main.APIError'
        "500":
          description: Server internal bug
          schema:
            $ref: '#/definitions/main.APIInternalError'
      summary: Returns solution template for specified language
      tags:
      - template
swagger: "2.0"
